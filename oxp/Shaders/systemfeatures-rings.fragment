/* WARNING: This shader is unoptimised and relatively inefficient. It
 * is to demonstrate what can be done, not necessarily how to do
 * it. */

varying vec3        v_normal;
varying vec2						vTexCoord;

uniform sampler2D uDiffuseMap;

uniform vec4 uVec1; // sun position 
uniform vec4 uVec2; // player position (should be camera)
uniform vec4 uDist; // camera-relative position
uniform vec4 uCentre; // planet position
uniform vec4 uOrient; // ring orientation

uniform vec4 uVecUp; // up vector
uniform vec4 uVecRight; // right vector

uniform float uFloat1; // planet radius squared
uniform float uFloat2; // effect linear size

void main(void) {

	float x = 0.5-vTexCoord.s;
	float y = 0.5-vTexCoord.t;
	float r2 = (x*x)+(y*y);
	
	float outerR = 0.021;
	float innerR = 0.01;

	if (r2 > outerR || r2 < innerR) {
		discard;
	} else {

		vec3 up = uVecUp.xyz;
		vec3 right = uVecRight.xyz;
		
		vec3 offset = (up * uFloat2 * -y * 2.0) + (right * uFloat2 * x * 2.0);
		vec3 wPos = uCentre.xyz + offset;

		/* Because the ring object is so large, a 24-bit depth buffer with
		 * respect to the planet is insufficient at long range.
		 * Therefore, calculate if the point on the ring is obscured by
		 * the planet */

		vec3 ray = uVec2.xyz - wPos;
		float qa = dot(ray, ray);
		float qb = 2.0 * dot(ray, offset);
		float qc = dot(offset, offset) - (uFloat1); 

		float dist = dot(uDist.xyz, offset);

		if(qb*qb > 4.0*qa*qc && dist > 0.0) {
			discard;
		} else {
			/* Obscuration calculation complete */

			float threshold = 0.0;
			if (r2 > 0.02) {
				threshold = (r2-0.02)*2000.0;
			} else if (r2 < 0.011) {
				threshold = (0.011-r2)*2000.0;
			} else {
				float band = fract(r2*218.0);
				if (band < 0.16) {
					threshold = 2.0-abs((0.08-band)*25.0);
				}
			}

			float cx = fract(vTexCoord.s*32.6);
			float cy = fract(vTexCoord.t*46.1);
			vec2 coord = vec2(cx,cy);
			float noise1 = texture2D(uDiffuseMap, coord).r;
			float noise2 = texture2D(uDiffuseMap, coord).g;
			float noise3 = texture2D(uDiffuseMap, coord).b;

			if (noise1+noise2+noise3 < threshold) {
				discard;
			} else {
				float r = 0.1+(0.1*sin(r2*10000.0)*sin(r2*10000.0))+(noise3*0.5);
				float distance = length(wPos.xyz - uVec2.xyz);
				if (distance < 30000.0) {
					threshold = 0.4;
				} else if (distance > 600000.0) {
					threshold = 0.1;
				} else {
					threshold = 0.4-(((distance-30000.0)/570000.0)*0.35);
				}
				if (r < threshold) {
					discard;
				} else {
					r = (r - ((0.6+threshold)/2.5)) * 4.0;
				
					float g = r + noise2/18.0;
					float b = g + noise1/33.0;

					/* Modified obscuration formula to get the planet's shadow */
					ray = uVec1.xyz - wPos;
					qa = dot(ray, ray);
					qb = 2.0 * dot(ray, offset);
					qc = dot(offset, offset) - (uFloat1); 
				
					dist = dot(uCentre.xyz-uVec1.xyz, offset);
		
					float det = (4.0*qa*qc)/(qb*qb);
					if(det < 1.0 && dist > 0.0) {
						float dp = (det-0.8) * 5.0;
						if (dp < 0.2) {
							dp = 0.2;
						}
						r *= dp;
						g *= dp;
						b *= dp;
					}
					/* Planet shadow calculation done */

					gl_FragColor = vec4(r,g,b,1.0);
				}
			}
		}		
	} 
}
